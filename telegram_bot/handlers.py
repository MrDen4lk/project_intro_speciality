import telegram_bot.keyboards as kb
from telegram_bot.user_requests import make_req
import database.dynamic_db as ddb
import json
import logging
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup,State
from aiogram.fsm.context import FSMContext

# —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
router = Router()

# –∫–ª–∞—Å—Å –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Request(StatesGroup):
    search = State()
    town = State()
    salary = State()
    experience = State()
    employment = State()
    sort = State()
    text = State()

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_daily_message(bot: Bot) -> None:
    try:
        for chat_id in await ddb.get_column('users','id'):
            data = (await ddb.get_user(chat_id)).history_req

            # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É—á–∞—è –∏—Å–∫–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∞–∫–∞–Ω—Å–∏–∏
            if len(data) != 0:
                # –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                data_req = json.loads(data[-1])
                data_req["sort"] = "–°–≤–µ–∂–µ—Å—Ç–∏"
                data_from_parser = await make_req(data_req, 0, 0)

                # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                text = (f"‚úî {data_from_parser[0]['title']}\n‚úî {data_from_parser[0]['employer']}\n"
                        f"‚úî {data_from_parser[0]['salary_info']}\n‚úî {data_from_parser[0]['url']}")
                await bot.send_message(chat_id=chat_id, text="–í–∞–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üéØ‚≠êÔ∏è")
                await bot.send_message(chat_id=chat_id, text=text)
            else:
                await bot.send_message(chat_id=chat_id, text="–°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã üåü")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await ddb.add_user(user_id=message.from_user.id,
                       vac_now=0, vac_total=0, page=0, history_req=list(), history_ans=list(), history_req_stat=list())
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã",
                         reply_markup=kb.start_button,
                         resize_keyboard=True)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
@router.message(Command(commands=["help"]))
async def cmd_help(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
@router.message(F.text == "–ò—Å–∫–∞—Ç—åüîé")
async def cmd_town(message: Message, state: FSMContext) -> None:
    await state.update_data(search=False)
    await state.set_state(Request.town) # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è town
    await ddb.update_user(message.from_user.id, {"page" : 0})
    await message.answer("–ù–∞—á–Ω–µ–º –ø–æ–∏—Å–∫!",
                         reply_markup=ReplyKeyboardRemove())
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–º –∏—â–∏—Ç–µ —Ä–∞–±–æ—Ç—É üèô",
                         reply_markup=await kb.inline_town_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–ºüìä")
async def cmd_town(message: Message, state: FSMContext) -> None:
    await state.update_data(search=True)
    await state.set_state(Request.town) # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è town
    await ddb.update_user(message.from_user.id, {"page" : 0})
    await message.answer("–ù–∞—á–Ω–µ–º –ø–æ–∏—Å–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!",
                         reply_markup=ReplyKeyboardRemove())
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–º –∏—â–∏—Ç–µ —Ä–∞–±–æ—Ç—É üèô",
                         reply_markup=await kb.inline_town_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ salary
@router.message(Request.town)
async def cmd_salary(message: Message, state: FSMContext) -> None:
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ —Å–ø–∏—Å–∫–µ HH
    if message.text not in (await ddb.get_column("cities", "city_name")):
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–π")
    else:
        await state.update_data(town=message.text) # –∑–∞–ø–∏—Å—å –≤ –ø–æ–ª–µ town
        await state.set_state(Request.salary) # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è salary
        await message.answer("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç–æ–ª—å–∫–æ —Å –ó–ü üíµ",
                             reply_markup=await kb.inline_salary_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∫—Ä–æ–º–µ –¥—Ä—É–≥–æ–≥–æ –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ salary
@router.callback_query(F.data.in_(["Moscow", "Petersburg", "Novosibirsk", "Yekaterinburg", "Kazan", "Nizhny", "any_town"]))
async def cmd_town_button(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(town=(await ddb.get_town(callback.data, "key")).value) # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª–µ town
    await state.set_state(Request.salary) # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è salary
    await callback.message.edit_reply_markup(
        reply_markup=await kb.inline_town_button_chosen(callback.data))
    await callback.message.answer("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç–æ–ª—å–∫–æ —Å –ó–ü üíµ",
                                  reply_markup=await kb.inline_salary_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
@router.callback_query(F.data == "other")
async def cmd_other_town_button(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Request.town) # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è town
    await callback.message.edit_reply_markup(
        reply_markup=await kb.inline_town_button_chosen(callback.data))
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ salary –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ experience
@router.callback_query(F.data.in_(["True", "False"]))
async def cmd_salary_button(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(salary=(await ddb.get_salary(callback.data, "key")).value) # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª–µ salary
    await state.set_state(Request.experience) # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è experience
    await callback.message.edit_reply_markup(
        reply_markup=await kb.inline_salary_button_chosen(callback.data))
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã üíº",
                                  reply_markup=await kb.inline_experience_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ experience –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ employment
@router.callback_query(F.data.in_(["noExperience", "between1And3", "between3And6", "moreThan6", "any_exp"]))
async def cmd_exp_button(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(experience=(await ddb.get_experience(callback.data, "key")).value) # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª–µ experience
    await state.set_state(Request.employment) # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è employment
    await callback.message.edit_reply_markup(
        reply_markup=await kb.inline_experience_button_chosen(callback.data))
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã üóìÔ∏è",
                                  reply_markup=await kb.inline_employment_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ employment –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ sort
@router.callback_query(F.data.in_(["full", "part", "project", "probation", "any_empl"]))
async def cmd_empl_button(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(employment=(await ddb.get_employment(callback.data, "key")).value) # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª–µ employment
    await callback.message.edit_reply_markup(reply_markup=await kb.inline_employment_button_chosen(callback.data))
    data = await state.get_data()
    if data["search"]:
        await state.set_state(Request.text)  # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è text
        await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üìù")
    else:
        await state.set_state(Request.sort)  # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è sort
        await callback.message.answer("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ üìÇ",
                                      reply_markup=await kb.inline_sort_button())

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ sort –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ text
@router.callback_query(F.data.in_(["relevance", "publication_time", "salary_desc", "salary_asc", "any_sort"]))
async def cmd_sort_button(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(sort=(await ddb.get_sort(callback.data, "key")).value) # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª–µ sort
    await state.set_state(Request.text) # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è text
    await callback.message.edit_reply_markup(reply_markup=await kb.inline_sort_button_chosen(callback.data))
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üìù")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å –≤ –ø–∞—Ä—Å–µ—Ä
@router.message(Request.text)
async def cmd_text(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id # –ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(text=message.text) # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª–µ text
    data = await state.get_data() # –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ Requests
    await state.clear() # –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    if data["search"]:
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        await ddb.update_user(user_id, {"history_req_stat": [json.dumps(data, ensure_ascii=False)]})

        await message.answer("–ò–¥–µ—Ç —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –æ–∂–∏–¥–∞–π—Ç–µ‚Ä¢‚Ä¢‚Ä¢",
                             reply_markup=kb.start_button,
                             resize_keyboard=True)
        await make_req(data, 0, message.chat.id)
    else:
        await message.answer("–ü–æ–∏—Å–∫‚Ä¢‚Ä¢‚Ä¢")
        data_from_parser = await make_req(data, 0, message.chat.id) # –∑–∞–ø—Ä–æ—Å –≤ –ø–∞—Ä—Å–µ—Ä
        vac_total = len(data_from_parser) # –≤—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        vac_now = min(vac_total, 1) # —Ç–µ–∫—É—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        txt = str()
        for item in data_from_parser:
            txt += json.dumps(item, ensure_ascii=False) + "#"

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        await ddb.update_user(user_id, {"vac_now": vac_now, "vac_total": vac_total,
                                                 "history_req": [json.dumps(data, ensure_ascii=False)],
                                                 "history_ans": [txt]})

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ –Ω–∞–π–¥–µ–Ω—ã –ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
        if vac_total == 0:
            await message.answer("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                                 reply_markup=kb.start_button,
                                 resize_keyboard=True)
        else:
            text = (f"‚úî {data_from_parser[0]['title']}\n‚úî {data_from_parser[0]['employer']}\n"
                    f"‚úî {data_from_parser[0]['salary_info']}\n‚úî {data_from_parser[0]['url']}")
            await message.answer(text,
                                 reply_markup=await kb.inline_pages_builder(user_id))

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–∞–∫–∞–Ω—Å–∏–π
@router.callback_query(F.data == "next")
async def cmd_next(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id  # –ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await ddb.get_user(user_id) # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    await ddb.update_user(user_id, {"vac_now" : (data.vac_now + 1)}) # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î

    data_for_text = json.loads(data.history_ans[-1].split("#")[data.vac_now])
    text = (f"‚úî {data_for_text['title']}\n"
            f"‚úî {data_for_text['employer']}\n"
            f"‚úî {data_for_text['salary_info']}\n"
            f"‚úî {data_for_text['url']}")
    await callback.message.edit_text(text,
                                     reply_markup=await kb.inline_pages_builder(user_id))

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–∞–∫–∞–Ω—Å–∏–π
@router.callback_query(F.data == "prev")
async def cmd_prev(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id # –ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await ddb.get_user(user_id)  # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    await ddb.update_user(user_id, {"vac_now" : (data.vac_now - 1)}) # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î

    data_for_text = json.loads(data.history_ans[-1].split("#")[data.vac_now - 2])
    text = (f"‚úî {data_for_text['title']}\n"
            f"‚úî {data_for_text['employer']}\n"
            f"‚úî {data_for_text['salary_info']}\n"
            f"‚úî {data_for_text['url']}")
    await callback.message.edit_text(text,
                                     reply_markup=await kb.inline_pages_builder(user_id))

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–µ –µ—â—ë –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –≤–∞–∫–∞–Ω—Å–∏–π
@router.callback_query(F.data == "morevac")
async def cmd_more(callback: CallbackQuery):
    data = await ddb.get_user(callback.from_user.id)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    if data.vac_total < 50:
        await callback.answer(text="–í–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç", show_alert=True)
    else:
        request_to_parser = json.loads(data.history_req[-1])
        data_from_parser = await make_req(request_to_parser, data.page + 1, callback.message.chat.id)  # –∑–∞–ø—Ä–æ—Å –≤ –ø–∞—Ä—Å–µ—Ä
        vac_total = len(data_from_parser)
        vac_now = min(vac_total, 1)
        txt = str()
        for item in data_from_parser:
            txt += json.dumps(item, ensure_ascii=False) + "#"
        await ddb.update_user(callback.from_user.id, {"vac_now": vac_now, "vac_total": vac_total, "page": data.page + 1,
                                                               "history_req": [json.dumps(request_to_parser, ensure_ascii=False)],
                                                               "history_ans": [txt]})

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ –Ω–∞–π–¥–µ–Ω—ã –ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
        if vac_total == 0:
            await callback.message.edit_reply_markup(reply_markup=await kb.inline_pages_builder_chosen(callback.from_user.id))
            await callback.message.answer(text="–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                                          reply_markup=kb.start_button,
                                          resize_keyboard=True)
        else:
            text = (f"‚úî {data_from_parser[0]['title']}\n‚úî {data_from_parser[0]['employer']}\n"
                    f"‚úî {data_from_parser[0]['salary_info']}\n‚úî {data_from_parser[0]['url']}")
            await callback.message.edit_text(text,
                                             reply_markup=await kb.inline_pages_builder(callback.from_user.id))

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ town
@router.callback_query(F.data == "town_end")
async def cmd_town_end(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await callback.message.edit_reply_markup(reply_markup=await kb.inline_town_button_chosen(callback.data))
    await callback.message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!",
                                  reply_markup=kb.start_button)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ salary
@router.callback_query(F.data == "salary_end")
async def cmd_salary_end(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await callback.message.edit_reply_markup(reply_markup=await kb.inline_salary_button_chosen(callback.data))
    await callback.message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!",
                                  reply_markup=kb.start_button)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ experience
@router.callback_query(F.data == "exp_end")
async def cmd_exp_end(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await callback.message.edit_reply_markup(reply_markup=await kb.inline_experience_button_chosen(callback.data))
    await callback.message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!",
                                  reply_markup=kb.start_button)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ employment
@router.callback_query(F.data == "empl_end")
async def cmd_empl_end(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear() # –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=await kb.inline_employment_button_chosen(callback.data))
    await callback.message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!",
                                  reply_markup=kb.start_button)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ sort
@router.callback_query(F.data == "sort_end")
async def cmd_sort_end(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear() # –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=await kb.inline_sort_button_chosen(callback.data))
    await callback.message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!",
                                  reply_markup=kb.start_button)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–∞–∫–∞–Ω—Å–∏–π
@router.callback_query(F.data == "final_end")
async def cmd_final_end(callback: CallbackQuery, state: FSMContext) -> None:
    user_id = callback.from_user.id
    await state.clear() # –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=await kb.inline_pages_builder_chosen(user_id))
    await callback.message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!",
                                  reply_markup=kb.start_button)
