from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup,State
from aiogram.fsm.context import FSMContext
import keyboards as kb
import user_requests
from database.db import *

# —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
router = Router()

# –∫–ª–∞—Å—Å –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Request(StatesGroup):
    town = State()
    salary = State()
    experience = State()
    employment = State()
    text = State()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, @{message.from_user.username}!\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã",
                         reply_markup=kb.start_button,
                         resize_keyboard=True)

# –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–æ—Ä–æ–¥
@router.message(F.text == "–ò—Å–∫–∞—Ç—åüîé")
async def cmd_town(message: Message, state: FSMContext) -> None:
    await message.answer("–ù–∞—á–Ω–µ–º –ø–æ–∏—Å–∫!",
                         reply_markup=ReplyKeyboardRemove())
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–º –∏—â–∏—Ç–µ —Ä–∞–±–æ—Ç—É:",
                         reply_markup=await kb.inline_town_button(),
                         resize_keyboard=True)

# –∑–∞–ø–∏—Å—å –≥–æ—Ä–æ–¥–∞ –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ–ª—å–∫–æ —Å –ó–ü
@router.message(Request.town)
async def cmd_salary(message: Message, state: FSMContext) -> None:
    await state.update_data(town=message.text)
    await state.set_state(Request.salary)
    await message.answer("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç–æ–ª—å–∫–æ —Å –ó–ü:",
                         reply_markup=await kb.inline_salary_button(),
                         resize_keyboard=True)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–Ω–æ–ø–∫–µ town_button
@router.callback_query(F.data.in_(kb.list_of_towns[:-1]))
async def cmd_town_button(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(town=map_of_towns[callback.data])
    await state.set_state(Request.salary)
    await callback.message.edit_reply_markup(
        reply_markup=await kb.inline_town_button_chosen(callback.data))
    await callback.message.answer("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç–æ–ª—å–∫–æ —Å –ó–ü:",
                         reply_markup=await kb.inline_salary_button(),
                         resize_keyboard=True)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥
@router.callback_query(F.data == "other")
async def cmd_other_town_button(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Request.town)
    await callback.message.edit_reply_markup(
        reply_markup=await kb.inline_town_button_chosen(callback.data))
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–Ω–æ–ø–∫–µ salary_button
@router.callback_query(F.data.in_(kb.list_of_salary))
async def cmd_salary_button(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(salary=map_of_salary[callback.data])
    await state.set_state(Request.experience)
    await callback.message.edit_reply_markup(
        reply_markup=await kb.inline_salary_button_chosen(callback.data))
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:",
                         reply_markup=await kb.inline_experience_button(),
                         resize_keyboard=True)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–Ω–æ–ø–∫–µ experience_button
@router.callback_query(F.data.in_(kb.list_of_experience))
async def cmd_exp_button(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(experience=map_of_experience[callback.data])
    await state.set_state(Request.employment)
    await callback.message.edit_reply_markup(
        reply_markup=await kb.inline_experience_button_chosen(callback.data))
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:",
                         reply_markup=await kb.inline_employment_button(),
                         resize_keyboard=True)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–Ω–æ–ø–∫–µ employment_button
@router.callback_query(F.data.in_(kb.list_of_employment))
async def cmd_empl_button(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(employment=map_of_employment[callback.data])
    await state.set_state(Request.text)
    await callback.message.edit_reply_markup(
        reply_markup=await kb.inline_employment_button_chosen(callback.data))
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
@router.message(Request.text)
async def cmd_text(message: Message, state: FSMContext) -> None:
    await state.update_data(text=message.text)
    data = await state.get_data()
    await message.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏: ",
                                  reply_markup=kb.start_button,
                                  resize_keyboard=True)
    await state.clear()
    answer = await user_requests.make_req(data)
    await message.answer(answer[0])